/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 *  gradle run --args="consulta 1 coronavirus"
 *  gradle run --args="consulta 2 01/04/2021"
 *  gradle run --args="consulta 3 -15"
 * 
 *  gradle run --args="update 4547 19643 2"
 */
package consultasTP2

import java.sql.*
import java.util.*

fun consulta (statement: String?, conn: Connection) {
    val st = conn.createStatement()
    val rs = st.executeQuery(statement);

    val rsmd = rs.getMetaData()
    val cc = rsmd.getColumnCount() + 1

    while(rs.next()){
        for(cursor in 1 until cc)
            print(rsmd.getColumnName(cursor) + ": " + rs.getString(cursor) + "\n") 
        println("")       
    }

    rs.close()
    st.close()
}

fun update (codigo: String, codigoTipo: String, conn: Connection, ammount: Int): Boolean {
    val statement = "UPDATE Lote " + 
        "SET QuantidadeAtual = QuantidadeAtual-$ammount " + 
        "WHERE (Codigo = '$codigo') and Codigo_Tipo = '$codigoTipo'"

    val st = conn.createStatement()
    val rowsUpdated = st.executeUpdate(statement);
   
    println("Rows updated: " + rowsUpdated)

    st.close()

    if(rowsUpdated > 0)
        return true
    
    return false 
}

fun main(args: Array<String>) {
    val url = "jdbc:postgresql://localhost:5432/PSF?user=postgres&password=123456"
    val conn = DriverManager.getConnection(url)

    when(args[0]){
        "consulta" -> {
            when(args[1]){
                "1" -> {
                    val objetivo = args[2].toString()

                    //retorna nome, cns, data de vacinação e lote da vacina 
                    //de todos os pacientes que foram vacinados com vacinas com o objetivo especificado ("coronarirus", "gripe")
                    val statement1 = "SELECT Paciente.Nome, Paciente.cns, Vacina.T_Data, Lote.codigo " +
                        "FROM (Paciente " +
                        "INNER JOIN Vacina on (Paciente.CNS = Vacina.CNS_Paciente)) " +
                        "INNER JOIN Lote on (Vacina.Codigo_Lote = Lote.Codigo) " +
                        "INNER JOIN TipoDeVacina on (Lote.Codigo_Tipo = TipoDeVacina.Codigo) " + 
                        "WHERE TipoDeVacina.Objetivo = '$objetivo'"

                    consulta(statement1, conn)
                }

                "2" -> {
                    //retorna o código e data da consulta, nome do paciente e nome do enfermeiro
                    //de todas as consultas que ocorreram ou ocorrerão na data informada
                    val data_consulta = args[2].toString();

                    val statement2 = "SELECT Consulta.Codigo, Consulta.C_data, Paciente.Nome, Enfermeiro.Nome " + 
                        "FROM Consulta, Paciente, Enfermeiro " +
                        "WHERE  Consulta.C_Data = '$data_consulta' and (CNS_Paciente = CNS) and (CPF_Enfermeiro = CPF)"

                    consulta(statement2, conn)
                }

                "3" -> {
                    val temp = args[2].toString()

                    //retorna codigo, metodo administrativo, validade e código
                    //de todas as vacinas que precisam ser armazenadas em temperatura < o especificado
                    val statement = "SELECT TV.codigo, TV.metodo_adm, L.validade, R.codigo " +
                        "FROM TipoDeVacina as TV " +
                        "INNER JOIN Lote as L on (TV.Codigo = L.Codigo_Tipo)" +
                        "INNER JOIN Vacina as V on (L.Codigo = V.Codigo_Lote) " +
                        "INNER JOIN Refrigerador as R on (V.Codigo_Refrigerador = R.Codigo) " +
                        "WHERE TV.Temperatura < $temp"
                    
                    consulta(statement, conn)
                }

                else -> print("otherwise")
            }
        }

        "update" -> {
            val code = args[1].toString()

            //atualiza a quantidade atual de vacinas no lote especificado
            if(update(args[1].toString(), args[2].toString(), conn, args[3].toInt())) {
                val statement = "SELECT QuantidadeAtual " +
                    "FROM Lote " +
                    "Where Codigo = '$code'"

                consulta(statement, conn)
            }
        }
        else -> print("otherwise")
    }
}
